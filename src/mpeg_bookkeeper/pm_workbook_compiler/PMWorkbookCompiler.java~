package mpeg_bookkeeper.pm_workbook_compiler;

import java.io.IOException;
import jxl.read.biff.BiffException;
import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import jxl.write.*;
import jxl.*;

import mpeg_bookkeeper.SubProcess;

public class PMWorkbookCompiler extends SubProcess {
   private static final String ProjectManagerLabel = "PROJ MGR :";
   
   private String jcaFolderName;
   private String workbooksFolderName;
   private String date;
   
   public PMWorkbookCompiler(PMGui gui, String jcaFolderName,
   	String workbooksFolderName, String date) {
   	this.gui = gui;
   	this.jcaFolderName = jcaFolderName;
   	this.workbooksFolderName = workbooksFolderName;
   	this.date = date;
   }
   
   public  void run() {
      ArrayList<String> sortFailed;
      ArrayList<String> writeFailed;
      ArrayList<String> incorrectFormat;
      ArrayList<String> failedPMWorkbooks;
      ArrayList<PMWorkbook> pmWorkbooks;
      PMWorkbook newPMWorkbook;
      String pmFolderName;
      File pmFolder;
      boolean found;
      File jcaFolder;
      File[] jcaFiles;
      ArrayList<JCAFileName> jcaFileNames;
      ArrayList<String> tempExcluded;
      String pm;
      
      try {
		   this.gui = gui;
		   output("Using JCAs from " + jcaFolderName);
		   pmFolderName = workbooksFolderName + "/Project Manager Workbooks" 
		   	+ " " + date.replace('/', '_');
		   pmFolder = new File(pmFolderName);
		   pmFolder.mkdir();
		   output("Created pmFolder at " + pmFolderName);
		   pmWorkbooks = new ArrayList<PMWorkbook>();
		   
		   jcaFolder = new File(jcaFolderName);
		   jcaFiles = jcaFolder.listFiles();
		   
		   jcaFileNames = new ArrayList<JCAFileName>();
		   
		   pollStop();
		   
		   for (File file : jcaFiles) {
		       if (file.isFile() && file.getAbsolutePath().contains(".xls")) {
		           jcaFileNames.add(new JCAFileName(jcaFolderName + "/" + file.getName()));
		       }
		   }
		   
		   Collections.sort(jcaFileNames);
		   
		   incorrectFormat = new ArrayList<String>();
		   sortFailed = new ArrayList<String>();
		   writeFailed = new ArrayList<String>();
		   failedPMWorkbooks = new ArrayList<String>();
		   
		   output("");
		   output("Sorting JCAs by Project Manager.");
		   
		   for (JCAFileName fileName : jcaFileNames) {
		   	pollStop();
		      String fileNameShort = fileName.getFileName();
		      try {
		         pm = getProjectManager(fileName.getFilePath());
		   
		         found = false;
		         
		         if (JCAFormat.badFormat(fileName.getFilePath())) {
						output("   " + fileNameShort + " is incorrectly formatted.");
						incorrectFormat.add(fileNameShort);
					}
		         else if (pm != null) {
		            for (PMWorkbook pmWorkbook : pmWorkbooks) {
		               if (pm.compareTo(pmWorkbook.getProjectManager().trim()) == 0) {
		                  try {
		                     pmWorkbook.addSheet(fileName.getFilePath());
		                     output("   " + fileNameShort + " sorted to " 
		                        + pmWorkbook.getProjectManager());
		                  }
		                  catch (Exception ex) {
		                     output("Could not get sheet for " + fileNameShort);
		                     sortFailed.add(fileNameShort);
		                  }  
		                  found = true;
		               }
		            }
		            if (found == false) {
		               try {
		                  output("   Creating workbook for " + pm);
		                  newPMWorkbook = new PMWorkbook(pm, pmFolderName, gui);
		                  newPMWorkbook.addSheet(fileName.getFilePath());
		                  pmWorkbooks.add(newPMWorkbook);
		               }
		               catch (Exception ex) {
		                  output("Could not get sheet for " + fileNameShort);
		                  sortFailed.add(fileNameShort);
		               }
		            }
		         }
		         else {
		            output("Could not find project manager for " + fileNameShort);
		            sortFailed.add(fileNameShort);
		         } 
		      
		      }
		      catch (Exception ex) {
		         output("Could not find project manager for " + fileNameShort);
		         output("   " + ex);
		      }
		   }
		   
		   output("");
		   output("List of sorted jcas:");
		   output("");
		   for (PMWorkbook pmWorkbook : pmWorkbooks) {
		      output(pmWorkbook.toString());
		   }
		   
		   output("");
		   for (PMWorkbook pmWorkbook : pmWorkbooks) {
		   	pollStop();
		      try {
		         output("Writing " + pmWorkbook.getProjectManager() + "'s workbook");
		         tempExcluded = pmWorkbook.write();
		         writeFailed.addAll(tempExcluded);
		         tempExcluded = null;
		      }
		      catch (Exception ex) {
		         output("      Failed to write pmWorkbook for " + pmWorkbook.getProjectManager());
		         output("         " + ex);
		         writeFailed.addAll(pmWorkbook.getSheets());
		         failedPMWorkbooks.add(pmWorkbook.getProjectManager());
		         printStackTrace(ex.getStackTrace());
		      }
		   }
		   
		   if (incorrectFormat.size() != 0) {
		      output("");
		      output("The following JCAs are incorrectly formatted.");
		      for (String job : incorrectFormat) 
		         output("   " + job);
		   }
		   
		   if (sortFailed.size() != 0) {
		      output("");
		      output("The following JCAs could not be sorted. Please add them manually.");
		      for (String job : sortFailed) 
		         output("   " + job);
		   }
		   
		   if (writeFailed.size() != 0) {
		      output("");
		      output("The following JCAs failed to write to a PMWorkbook. Please add them manually.");
		      for (String job : writeFailed) 
		         output("   " + job);
		   }
		   
		   
		   if (failedPMWorkbooks.size() != 0) {
		      output("");
		      output("The following PMWorkbooks failed to write.");
		      for (String job : failedPMWorkbooks) 
		         output("   " + job);
		   }
		   
		   output("");
		   output("All done! :)");
		   
		   try {
		      gui.saveLogFile(pmFolderName + "/PMWorkbook_logFile");
		   }
		   catch (Exception ex) {
		      gui.output("Warning, failed to save log file");
		   }
		}
		catch (InterruptedException ex) {
      	gui.resetLog();
      	gui.output("PM Workbook Compiler Canceled.");
      	gui.output("");
      	gui.output("Cleaning up files...");
      	cleanUp();
      	gui.output("");
      	gui.output("Weekly Recap Terminated.");
		}
      finally {
      	gui.processFinishedCallback();
      }
   }
   
   protected void cleanUp() {
   
   }
   
   // Retrieves the project manager's initials from the JCA file at the path |jcaFile|.
   // Returns null if the initials aren't found for any reason.
   public static String getProjectManager(String jcaFile) throws Exception {
      Workbook workbook = Workbook.getWorkbook(new File(jcaFile));
      Sheet sheet = workbook.getSheet(0);
      Cell searchCell;
      Cell projectManagerCell;
      String projectManager;
      
      searchCell = sheet.findCell(ProjectManagerLabel);
      
      projectManager = null;
      
      if (searchCell != null) {
            
         projectManagerCell = sheet.getCell(searchCell.getColumn() + 1,
            searchCell.getRow());
            
         projectManager = projectManagerCell.getContents();
      }
      
      if (projectManager.compareTo("") == 0)
         return null;
      
      workbook.close();
      return projectManager.trim();
   }
   
   public void printStackTrace(StackTraceElement[] stack) {
      for (int i = 0; i < stack.length; i++) {
         output("      " + stack[i]);
      }
   }
}
